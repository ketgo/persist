@startuml
scale 2


package "Core" {
    interface RecordManager <Page, Replacer, FSM> {
        + read(RecordLocation): ByteBuffer
        + read(RecordLocation, Txn): ByteBuffer
        + insert(ByteBuffer): RecordLocation
        + insert(ByteBuffer, Txn): RecordLocation
        + update(RecordLocation, ByteBuffer)
        + update(RecordLocation, ByteBuffer, Txn)
        + delete(RecordLocation)
        + delete(RecordLocation, Txn)
    }

    package "Concurency" {
        class ConcurencyManager {
            - bufferManager<Page>
            + track(PageSlot)
            + forget(PageSlot)
            + begin(Transaction, PageId, SlotId, Operation)
            + done(Transaction, PageId, SlotiD, Operation)
        }
    }

    package "Transaction" {
        class Transaction {}

        class TransactionManager <ConcurencyManager> {
            - logManager: LogManager
            - bufferManager: BufferManager<SlottedPage>
            + Transaction begin()
            + abort(Transaction)
            + commit(Transaction, Bool)
        }
    }

    package "Recovery" {
        class RecoveryManager {
            - logManager: LogManager
        }

        class CheckpointManager {
            - logManager: LogManager
        }

        class LogManager {
            - storage: Storage
            - bufferManager: BufferManager<LogPage>
            - seqNumber: SeqNumber
            + start()
            + stop()
            + get(LogRecordLocation): LogRecord
            + add(LogRecord): LogRecordLocation
        }

        class LogRecord {}
    }

    package "Page" {
        enum PageOperation {
            + READ
            + INSERT
            + UPDATE
            + DELETE
        }

        interface Page {
            - observers: PageObserver []
            ---
            - notifyObservers()
            + registerObserver(PageObserver)
            ..
            + getId(): PageId
            + getFreeSpace(PageOperation): uint64_t
            + load(ByteBuffer)
            + dump(ByteBuffer)
        }

        interface PageObserver {
            + handleModifiedPage(PageId)
        }
    }

    package "Storage" {
        abstract class Storage <Page> {
            + getPageSize(): uint64_t
            + getPageCount(): uint64_t
            + read(): FSM
            + write(FSM)
            + read(Page): Page
            + write(Page)
            + allocate(): PageId
            + deallocate(PageId)
        }
    }

    package "Buffer" {
        interface Replacer {
            + track(PageId)
            + forget(PageId)
            + pin(PageId)
            + isPinned(PageId): bool
            + unpin(PageId)
        }

        interface FSM {
            + get(uint64_t): PageId
            + set(PageId, uint64_t)
        }

        class BufferManager <Page, Replacer, FSM> {
            - buffer: Page []
            - replacer: Replacer
            - storage: Storage
            - fsm: FSM
            ---
            - put(Page)
            + handleModifiedPage(PageId)
            ..
            + start()
            + stop()
            + get(PageId): PageHandle<Page>
            + getNew(): PageHandle<Page>
            + getFree(): PageHandle<Page>
            + flush(PageId)
            + flushAll()
        }
    }
}

Page ..|> PageOperation
Page "1" o-- "n" PageObserver

Storage ..|> Page

BufferManager --|> PageObserver : inherits
BufferManager "1" o-- "n" Page
BufferManager --|> Replacer
BufferManager --|> FSM
BufferManager --|> Storage

LogManager --|> BufferManager
LogManager --|> Storage
LogManager --|> LogRecord
RecoveryManager --|> LogManager
CheckpointManager --|> LogManager

RecordManager --|> BufferManager
RecordManager --|> TransactionManager

TransactionManager --|> ConcurencyManager

@enduml